@top Recipe { statement* }

statement[@isGroup=Statement] { ( Call | RhsVariable | Alias | Assignment | StyleTagDeclaration | StyleBinding | Namespace ) semi }

QualifiableIdentifier { Identifier ("." Identifier)* }

Call { QualifiableIdentifier ArgList StyleArgList? }

ArgList { "(" ( value ("," value)* )? ")" }

value[@isGroup=Value] { RhsVariable | Call }

RhsVariable { QualifiableIdentifier }

LhsVariable { Identifier StyleArgList? }

Alias { LhsVariable "=" RhsVariable }

Assignment { LhsVariable ("," LhsVariable)* "=" Call }

semi { ";" | insertSemi }

NumberLiteral { numberLiteralInner Unit? }

// StyleValueName { cssIdentifier }
/* Tombstone: Adding StyleValueName to styleValue breaks NumberLiteral
unless we decide to make ';' mandatory in StyleDeclaration */

PropertyName { cssIdentifier }

styleValue[@isGroup=StyleValue] { ColorLiteral | NumberLiteral | StringLiteral }

StyleDeclaration { PropertyName ":" styleValue ("," styleValue)* semi }

StyleTagDeclaration { "#" Identifier StyleArgList }

StyleTag { "#" QualifiableIdentifier }

StyleArgList { "{" (StyleDeclaration | StyleTag | StringLiteral)* "}" }

/* Only StyleTags are allowed in StyleBindings
Although disallowing StyleDeclarations is inconsistent with other curly brackets
(i.e. StyleArgList), this forces StyleBinding users to define StyleTags
that can be reused by others */
StyleTagList { "{" StyleTag* "}" }

StyleBinding { "%" Identifier StyleTagList }

Namespace { Identifier? "[" statement* "]" ArgList? StyleArgList? }

@skip { spaces | newline | LineComment | BlockComment }

@context trackNewline from "./tokens.js"

@external tokens unitToken from "./tokens" { Unit }

@external tokens cssIdentifierToken from "./tokens" { cssIdentifier }

@tokens {
  spaces[@export] { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline[@export] { $[\r\n\u2028\u2029] }

  LineComment { "//" ![\n]* }

  BlockComment { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  word { identifierChar (identifierChar | std.digit)* }

  Identifier { word }

  hexDigit { std.digit | $[a-fA-F] }

  ColorLiteral { "#" hexDigit hexDigit hexDigit (hexDigit (hexDigit hexDigit (hexDigit hexDigit)?)?)? }

  numberLiteralInner { ("+" | "-")? (std.digit+ ("." std.digit*)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+)? }

  StringLiteral { "\"" (!["\n\\] | "\\" _)* "\"" | "'" (!['\n\\] | "\\" _)* "'" }

  "="[@name=Eq]

  @precedence { spaces, newline, Identifier }

  "#"

  "."

  ":"

  "%"

  "(" ")" "{" "}" "[" "]"

}

@external tokens insertSemicolon from "./tokens" { insertSemi }

@external propSource fizHighlighting from "./highlight"

@detectDelim
