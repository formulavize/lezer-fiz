# Empty



==>

Recipe()

# Two Variables Statements

x
y

==>

Recipe(
  RhsVariable(QualifiableIdentifier(Identifier))
  RhsVariable(QualifiableIdentifier(Identifier))
)

# Two Alias Statements

y = x
z = y

==>

Recipe(
  Alias(
    LhsVariable(Identifier),
    Eq,
    RhsVariable(QualifiableIdentifier(Identifier))
  ),
  Alias(
    LhsVariable(Identifier),
    Eq,
    RhsVariable(QualifiableIdentifier(Identifier))
  )
)

# Mixed Statements

y = f(x)
x = y
g()

==>

Recipe(
  Assignment(
    LhsVariable(Identifier),
    Eq,
    Call(
      Identifier,
      ArgList(RhsVariable(QualifiableIdentifier(Identifier)))
    )
  )
  Alias(
    LhsVariable(Identifier),
    Eq,
    RhsVariable(QualifiableIdentifier(Identifier))
  ),
  Call(Identifier, ArgList)
)

# Line Comment

// Comment

==>

Recipe(LineComment)

# Block Comments

/* OneLine */
/*
  Newline
*/
/*/*DoubleStart*/
/***
  Stars
***/

==>

Recipe(BlockComment, BlockComment, BlockComment, BlockComment)

# Mixed Statements with Comments

// Comment
y = f(x)
/* Comment */
x = y
/*
Comment
*/
g()

==>

Recipe(
  LineComment
  Assignment(
    LhsVariable(Identifier),
    Eq,
    Call(
      Identifier,
      ArgList(RhsVariable(QualifiableIdentifier(Identifier)))
    )
  )
  BlockComment
  Alias(
    LhsVariable(Identifier),
    Eq,
    RhsVariable(QualifiableIdentifier(Identifier))
  ),
  BlockComment
  Call(Identifier, ArgList)
)

# Semicolons

y = f(x);
x = y;
g();

==>

Recipe(
  Assignment(
    LhsVariable(Identifier),
    Eq,
    Call(
      Identifier,
      ArgList(RhsVariable(QualifiableIdentifier(Identifier)))
    )
  )
  Alias(
    LhsVariable(Identifier),
    Eq,
    RhsVariable(QualifiableIdentifier(Identifier))
  ),
  Call(Identifier, ArgList)
)

# Semicolons Same Line

a=b();f();x=y;

==>

Recipe(
  Assignment(
    LhsVariable(Identifier),
    Eq,
    Call(Identifier, ArgList)
  ),
  Call(Identifier, ArgList),
  Alias(
    LhsVariable(Identifier),
    Eq,
    RhsVariable(QualifiableIdentifier(Identifier))
  )
)

# Semicolon Same Line Divider

y = f(
  x,
  y,
  z
) ; a = b

==>

Recipe(
  Assignment(
    LhsVariable(Identifier),
    Eq,
    Call(
      Identifier,
      ArgList(
      RhsVariable(QualifiableIdentifier(Identifier)),
      RhsVariable(QualifiableIdentifier(Identifier)),
      RhsVariable(QualifiableIdentifier(Identifier))
    ))
  ),
  Alias(
    LhsVariable(Identifier),
    Eq,
    RhsVariable(QualifiableIdentifier(Identifier))
  )
)

# Diagram

         x = f(i); y = g(j)
//       |         |
   m = a(x); n = b(y);
//  \       /
//   \     /
//    \   /
   foo(m,n)

==>

Recipe(
  Assignment(
    LhsVariable(Identifier),
    Eq,
    Call(
      Identifier,
      ArgList(RhsVariable(QualifiableIdentifier(Identifier)))
    )
  ),
  Assignment(
    LhsVariable(Identifier),
    Eq,
    Call(
      Identifier,
      ArgList(RhsVariable(QualifiableIdentifier(Identifier)))
    )
  ),
  LineComment,
  Assignment(
    LhsVariable(Identifier),
    Eq,
    Call(
      Identifier,
      ArgList(RhsVariable(QualifiableIdentifier(Identifier)))
    )
  ),
  Assignment(
    LhsVariable(Identifier),
    Eq,
    Call(
      Identifier,
      ArgList(RhsVariable(QualifiableIdentifier(Identifier)))
    )
  ),
  LineComment,
  LineComment,
  LineComment,
  Call(
    Identifier,
    ArgList(
      RhsVariable(QualifiableIdentifier(Identifier)),
      RhsVariable(QualifiableIdentifier(Identifier))
    )
  )
)

# Empty Anonymous Import

@ ""

==>

Recipe(
  Import(StringLiteral)
)

# Aliased Import

test @ "testing"

==>

Recipe(
  Import(Identifier, StringLiteral)
)

# Two Import Statements

test @ "one"
@ "two"

==>

Recipe(
  Import(Identifier, StringLiteral)
  Import(StringLiteral)
)
